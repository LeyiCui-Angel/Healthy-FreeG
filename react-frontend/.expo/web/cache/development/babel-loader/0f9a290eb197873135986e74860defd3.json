{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { Text, View } from \"../components/Themed\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction SeparatorComponent() {\n  return _jsx(View, {});\n}\n\n;\n\nfunction APP() {\n  var DATA = [{\n    title: \"Fruits\",\n    sectionId: 1,\n    show: false,\n    data: [\"Apple\", \"Banana\", \"Orange\"]\n  }, {\n    title: \"Vegetables\",\n    sectionId: 2,\n    show: false,\n    data: [\"Spinach\", \"Onion\", \"Broccoli\"]\n  }, {\n    title: \"Grains\",\n    sectionId: 3,\n    show: false,\n    data: [\"Bread\", \"Pasta\"]\n  }, {\n    title: \"Protein Foods\",\n    sectionId: 4,\n    show: true,\n    data: [\"Fish\", \"Eggs\"]\n  }, {\n    title: \"Drinks\",\n    sectionId: 5,\n    show: false,\n    data: [\"Beer\", \"Water\"]\n  }];\n\n  var _useState = useState(DATA),\n      _useState2 = _slicedToArray(_useState, 2),\n      _sections = _useState2[0],\n      _setSections = _useState2[1];\n\n  function _tabHeader() {\n    var _this = this;\n\n    var data = JSON.parse(JSON.stringify(_sections));\n    data.map(function (item) {\n      if (item.sectionId === _this.sectionId) {\n        item.show = !item.show;\n      }\n    });\n\n    _setSections(data);\n  }\n\n  ;\n\n  function _renderItem(_ref) {\n    var item = _ref.item,\n        index = _ref.index,\n        section = _ref.section;\n\n    if (section.show) {\n      return _jsx(Text, {\n        children: item + JSON.stringify(section)\n      }, index);\n    }\n  }\n}\n\nvar Item = function Item(_ref2) {\n  var title = _ref2.title;\n  return _jsx(View, {\n    style: styles.item,\n    children: _jsx(Text, {\n      style: styles.title,\n      children: title\n    })\n  });\n};\n\nvar TabOneScreen = function TabOneScreen(_ref3) {\n  var navigation = _ref3.navigation;\n  return _jsx(SectionList, {\n    renderItem: _renderItem,\n    renderSectionHeader: function renderSectionHeader(_ref4) {\n      var _ref4$section = _ref4.section,\n          title = _ref4$section.title,\n          sectionId = _ref4$section.sectionId;\n      return _jsx(Text, {\n        style: styles.title,\n        sectionId: sectionId,\n        onPress: _tabHeader,\n        children: title\n      });\n    },\n    sections: _sections,\n    keyExtractor: function keyExtractor(item, index) {\n      return item + index;\n    },\n    SectionSeparatorComponent: SeparatorComponent\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16\n  },\n  item: {\n    backgroundColor: \"#b5c4b1\",\n    padding: 20,\n    marginVertical: 8\n  },\n  header: {\n    fontSize: 25,\n    backgroundColor: \"#bfbfbf\"\n  },\n  title: {\n    fontSize: 12\n  }\n});\nexport default TabOneScreen;","map":{"version":3,"sources":["/Users/angelcui/HealthyFreeG/screens/TabOneScreen.tsx"],"names":["React","useState","Text","View","SeparatorComponent","APP","DATA","title","sectionId","show","data","_sections","_setSections","_tabHeader","JSON","parse","stringify","map","item","_renderItem","index","section","Item","styles","TabOneScreen","navigation","StyleSheet","create","container","flex","paddingTop","StatusBar","currentHeight","marginHorizontal","backgroundColor","padding","marginVertical","header","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, SafeAreaView, SectionList, StatusBar } from \"react-native\";\n\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\n// test\nfunction SeparatorComponent(){\n  return <View/>;\n};\n\nfunction APP(){\n  const DATA = [\n    {\n      title: \"Fruits\",\n      sectionId: 1, \n      show: false,\n      data: [\"Apple\", \"Banana\", \"Orange\"]\n    },\n    {\n      title: \"Vegetables\",\n      sectionId: 2,\n      show: false,\n      data: [\"Spinach\", \"Onion\", \"Broccoli\"]\n    },\n    {\n      title: \"Grains\",\n      sectionId: 3, \n      show: false,\n      data: [\"Bread\", \"Pasta\"]\n    },\n    {\n      title: \"Protein Foods\",\n      sectionId: 4, \n      show: true,\n      data: [\"Fish\", \"Eggs\"]\n    },\n    {\n      title: \"Drinks\",\n      sectionId: 5, \n      show: false,\n      data: [\"Beer\", \"Water\"]\n    }\n  ];\n\n  // testing\n  const [_sections,_setSections] = useState(DATA)\n\n  function _tabHeader(){\n    // 对数据进行一次深拷贝 \n    const data = JSON.parse(JSON.stringify(_sections));\n    data.map((item) => {\n      if( item.sectionId === this.sectionId ) {\n        item.show = !item.show\n      }\n    });\n    _setSections(data);\n  };\n  // 渲染每一个列表项\n  function _renderItem({ item,index,section }){\n    if(section.show){\n      return <Text key={index}>{item + JSON.stringify(section)}</Text>\n    }\n  }\n}\n\nconst Item = ({ title }) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\nconst TabOneScreen = ({ navigation }: RootTabScreenProps<'TabOne'>) => (\n  <SectionList\n    renderItem={ _renderItem }\n      renderSectionHeader={({ section: { title,sectionId } }) => (\n        // 为列表组件赋予 sectionId \n        // 这样在调用方法的 this中便可以访问到 sectionId，根据sectionId来改变 show 的值\n        <Text style={ styles.title } sectionId={sectionId} onPress={ _tabHeader }>{title}</Text>\n      )}\n      sections={_sections}\n      keyExtractor={(item, index) => item + index}\n      // 要想显示隐藏功能正常，必须指定分组分隔组件\n      SectionSeparatorComponent={ SeparatorComponent }\n    />\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16\n  },\n  item: {\n    backgroundColor: \"#b5c4b1\",\n    padding: 20,\n    marginVertical: 8\n  },\n  header: {\n    fontSize: 25,\n    backgroundColor: \"#bfbfbf\"\n  },\n  title: {\n    fontSize: 12\n  }\n});\n\nexport default TabOneScreen;"]},"metadata":{},"sourceType":"module"}