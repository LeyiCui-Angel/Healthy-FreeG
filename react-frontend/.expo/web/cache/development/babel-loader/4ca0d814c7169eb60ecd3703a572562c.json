{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n{}\nimport * as React from 'react';\nimport { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport Constants from 'expo-constants';\nimport { Data } from \"../data/FGList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(Data),\n      _useState2 = _slicedToArray(_useState, 2),\n      listData = _useState2[0],\n      setListData = _useState2[1];\n\n  var row = [];\n  var prevOpenedRow;\n\n  var _renderItem = function renderItem(_ref, onClick) {\n    var item = _ref.item,\n        index = _ref.index;\n\n    var closeRow = function closeRow(index) {\n      console.log('closerow');\n\n      if (prevOpenedRow && prevOpenedRow !== row[index]) {\n        prevOpenedRow.close();\n      }\n\n      prevOpenedRow = row[index];\n    };\n\n    var _renderRightActions = function renderRightActions(progress, dragX, onClick) {\n      return _jsx(View, {\n        style: {\n          margin: 0,\n          alignContent: 'center',\n          justifyContent: 'center',\n          width: 70\n        },\n        children: _jsx(Button, {\n          color: \"red\",\n          onPress: onClick,\n          title: \"DELETE\"\n        })\n      });\n    };\n\n    return _jsxs(_Fragment, {\n      children: [_jsx(Swipeable, {\n        renderRightActions: function renderRightActions(progress, dragX) {\n          return _renderRightActions(progress, dragX, onClick);\n        },\n        onSwipeableOpen: function onSwipeableOpen() {\n          return closeRow(index);\n        },\n        ref: function ref(_ref2) {\n          return row[index] = _ref2;\n        },\n        rightOpenValue: -100,\n        children: _jsx(View, {\n          style: {\n            margin: 4,\n            borderColor: 'grey',\n            borderWidth: 1,\n            padding: 9,\n            backgroundColor: 'white'\n          },\n          children: _jsx(Text, {\n            children: item.title\n          })\n        })\n      }), _jsx(Button, {\n        title: \"Add food\",\n        color: \"#f194ff\",\n        onPress: function onPress() {\n          return Alert.alert('Recipe scanned! Food added.');\n        }\n      })]\n    });\n  };\n\n  var deleteItem = function deleteItem(_ref3) {\n    var item = _ref3.item,\n        index = _ref3.index;\n    console.log(item, index);\n    var a = listData;\n    a.splice(index, 1);\n    console.log(a);\n    setListData(_toConsumableArray(a));\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      data: listData,\n      renderItem: function renderItem(v) {\n        return _renderItem(v, function () {\n          console.log('Pressed', v);\n          deleteItem(v);\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n    padding: 8\n  },\n  paragraph: {\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/angelcui/HealthyFreeG/screens/TabOneScreen.tsx"],"names":["React","useState","Swipeable","Constants","Data","App","listData","setListData","row","prevOpenedRow","renderItem","onClick","item","index","closeRow","console","log","close","renderRightActions","progress","dragX","margin","alignContent","justifyContent","width","ref","borderColor","borderWidth","padding","backgroundColor","title","Alert","alert","deleteItem","a","splice","styles","container","v","id","StyleSheet","create","flex","paddingTop","statusBarHeight","paragraph","fontSize","fontWeight","textAlign"],"mappings":"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","sourcesContent":["{/*import React, { Component } from 'react';\nimport { Animated, StyleSheet, SafeAreaView, SectionList, Button, Alert, } from \"react-native\";\n\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nimport { Data } from '../data/FGList'\nimport { StatusBar } from 'expo-status-bar';\n\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\nconst Item = ({ title }) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\nconst TabOneScreen = ({ navigation }: RootTabScreenProps<'TabOne'>) => (\n  <SafeAreaView style={styles.container}>\n        renderRightActions={(progress, dragX) =>\n          renderRightActions(progress, dragX, onClick)\n        }\n        onSwipeableOpen={() => closeRow(index)}\n        ref={(ref) => (row[index] = ref)}\n        rightOpenValue={-100}>\n    <SectionList\n      sections={Data}\n      keyExtractor={(item, index) => item + index}\n      renderItem={({ item }) => <Item title={item} />}\n      renderSectionHeader={({ section: { title } }) => (\n        <Text style={styles.header}>{title}</Text>\n      )}\n    />\n\n    <Button\n        title=\"Add food\"\n        color=\"#f194ff\"\n        onPress={() => Alert.alert('Recipe scanned! Food added.')}\n    />\n  </SafeAreaView>\n);\n\n// Style\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16\n  },\n  item: {\n    backgroundColor: \"#b5c4b1\",\n    padding: 20,\n    marginVertical: 3\n  },\n  header: {\n    fontSize: 25,\n    backgroundColor: \"#bfbfbf\"\n  },\n  title: {\n    fontSize: 12\n  }\n});\n\nexport default TabOneScreen;*/}\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Text, View, StyleSheet, FlatList, Button, Alert } from 'react-native';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\nimport Constants from 'expo-constants';\n\nimport { Data } from '../data/FGList'\n\nexport default function App() {\n  const [listData, setListData] = useState(Data);\n  let row: Array<any> = [];\n  let prevOpenedRow;\n\n  /**\n   *\n   */\n  const renderItem = ({ item, index }, onClick) => {\n    //\n    const closeRow = (index) => {\n      console.log('closerow');\n      if (prevOpenedRow && prevOpenedRow !== row[index]) {\n        prevOpenedRow.close();\n      }\n      prevOpenedRow = row[index];\n    };\n\n    const renderRightActions = (progress, dragX, onClick) => {\n      return (\n        <View\n          style={{\n            margin: 0,\n            alignContent: 'center',\n            justifyContent: 'center',\n            width: 70,\n          }}>\n          <Button color=\"red\" onPress={onClick} title=\"DELETE\"></Button>\n        </View>\n      );\n    };\n\n    return (\n      <>\n        <Swipeable\n          renderRightActions={(progress, dragX) => renderRightActions(progress, dragX, onClick)}\n          onSwipeableOpen={() => closeRow(index)}\n          ref={(ref) => (row[index] = ref)}\n          rightOpenValue={-100}>\n          <View\n            style={{\n              margin: 4,\n              borderColor: 'grey',\n              borderWidth: 1,\n              padding: 9,\n              backgroundColor: 'white',\n            }}>\n            <Text>{item.title}</Text>\n          </View>\n        </Swipeable>\n        <Button\n            title=\"Add food\"\n            color=\"#f194ff\"\n            onPress={() => Alert.alert('Recipe scanned! Food added.')} \n        />\n      </>\n    );\n  };\n\n  const deleteItem = ({ item, index }) => {\n    console.log(item, index);\n    let a = listData;\n    a.splice(index, 1);\n    console.log(a);\n    setListData([...a]);\n  };\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={listData}\n        renderItem={(v) =>\n          renderItem(v, () => {\n            console.log('Pressed', v);\n            deleteItem(v);\n          })\n        }\n        keyExtractor={(item) => item.id}></FlatList>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n  paragraph: {\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}