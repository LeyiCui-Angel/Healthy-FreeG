{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Svg, { G, Circle, Defs, LinearGradient, Stop } from \"react-native-svg\";\nimport Animated, { useSharedValue, withTiming, useAnimatedProps, withDelay, runOnJS } from \"react-native-reanimated\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nvar CircularProgressWithChild = function CircularProgressWithChild(_ref) {\n  var value = _ref.value,\n      _ref$initialValue = _ref.initialValue,\n      initialValue = _ref$initialValue === void 0 ? 0 : _ref$initialValue,\n      _ref$circleBackground = _ref.circleBackgroundColor,\n      circleBackgroundColor = _ref$circleBackground === void 0 ? \"transparent\" : _ref$circleBackground,\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 60 : _ref$radius,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 500 : _ref$duration,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 0 : _ref$delay,\n      _ref$maxValue = _ref.maxValue,\n      maxValue = _ref$maxValue === void 0 ? 100 : _ref$maxValue,\n      _ref$strokeLinecap = _ref.strokeLinecap,\n      strokeLinecap = _ref$strokeLinecap === void 0 ? \"round\" : _ref$strokeLinecap,\n      _ref$onAnimationCompl = _ref.onAnimationComplete,\n      onAnimationComplete = _ref$onAnimationCompl === void 0 ? function () {} : _ref$onAnimationCompl,\n      _ref$activeStrokeColo = _ref.activeStrokeColor,\n      activeStrokeColor = _ref$activeStrokeColo === void 0 ? \"#2ecc71\" : _ref$activeStrokeColo,\n      _ref$activeStrokeSeco = _ref.activeStrokeSecondaryColor,\n      activeStrokeSecondaryColor = _ref$activeStrokeSeco === void 0 ? \"\" : _ref$activeStrokeSeco,\n      _ref$activeStrokeWidt = _ref.activeStrokeWidth,\n      activeStrokeWidth = _ref$activeStrokeWidt === void 0 ? 10 : _ref$activeStrokeWidt,\n      _ref$inActiveStrokeCo = _ref.inActiveStrokeColor,\n      inActiveStrokeColor = _ref$inActiveStrokeCo === void 0 ? \"rgba(0,0,0,0.3)\" : _ref$inActiveStrokeCo,\n      _ref$inActiveStrokeWi = _ref.inActiveStrokeWidth,\n      inActiveStrokeWidth = _ref$inActiveStrokeWi === void 0 ? 10 : _ref$inActiveStrokeWi,\n      _ref$inActiveStrokeOp = _ref.inActiveStrokeOpacity,\n      inActiveStrokeOpacity = _ref$inActiveStrokeOp === void 0 ? 1 : _ref$inActiveStrokeOp,\n      children = _ref.children,\n      _ref$clockwise = _ref.clockwise,\n      clockwise = _ref$clockwise === void 0 ? true : _ref$clockwise;\n  var animatedValue = useSharedValue(initialValue);\n  var viewBox = radius + Math.max(activeStrokeWidth, inActiveStrokeWidth);\n  var circleCircumference = 2 * Math.PI * radius;\n  var animatedCircleProps = useAnimatedProps(function () {\n    var biggestValue = Math.max(initialValue, maxValue);\n    biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n    var maxPercentage = clockwise ? 100 * animatedValue.value / biggestValue : 100 * -animatedValue.value / biggestValue;\n    return {\n      strokeDashoffset: circleCircumference - circleCircumference * maxPercentage / 100\n    };\n  });\n  useEffect(function () {\n    animatedValue.value = withDelay(delay, withTiming(value, {\n      duration: duration\n    }, function (isFinished) {\n      if (isFinished) {\n        var _runOnJS;\n\n        (_runOnJS = runOnJS(onAnimationComplete)) == null ? void 0 : _runOnJS();\n      }\n    }));\n  }, [value]);\n  return _jsxs(View, {\n    children: [_jsxs(Svg, {\n      width: radius * 2,\n      height: radius * 2,\n      viewBox: \"0 0 \" + viewBox * 2 + \" \" + viewBox * 2,\n      children: [activeStrokeSecondaryColor ? _jsx(Defs, {\n        children: _jsxs(LinearGradient, {\n          id: \"grad\",\n          x1: \"0%\",\n          y1: \"0%\",\n          x2: \"0%\",\n          y2: \"100%\",\n          children: [_jsx(Stop, {\n            offset: \"0%\",\n            stopColor: activeStrokeSecondaryColor\n          }), _jsx(Stop, {\n            offset: \"100%\",\n            stopColor: activeStrokeColor\n          })]\n        })\n      }) : null, _jsxs(G, {\n        rotation: \"-90\",\n        origin: viewBox + \", \" + viewBox,\n        children: [_jsx(Circle, {\n          cx: \"50%\",\n          cy: \"50%\",\n          stroke: inActiveStrokeColor,\n          strokeWidth: inActiveStrokeWidth,\n          r: radius,\n          fill: circleBackgroundColor,\n          strokeOpacity: inActiveStrokeOpacity\n        }), _jsx(AnimatedCircle, {\n          cx: \"50%\",\n          cy: \"50%\",\n          stroke: activeStrokeSecondaryColor ? \"url(#grad)\" : activeStrokeColor,\n          strokeWidth: activeStrokeWidth,\n          r: radius,\n          fill: \"transparent\",\n          strokeDasharray: circleCircumference,\n          animatedProps: animatedCircleProps,\n          strokeLinecap: strokeLinecap\n        })]\n      })]\n    }), _jsx(View, {\n      style: [StyleSheet.absoluteFillObject, styles.valueContainer],\n      children: children\n    })]\n  });\n};\n\nexport var styles = StyleSheet.create({\n  valueContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default CircularProgressWithChild;","map":{"version":3,"sources":["/Users/angelcui/HealthyFreeG/node_modules/react-native-circular-progress-indicator/src/circularProgressWithChild/index.tsx"],"names":["React","useEffect","Svg","G","Circle","Defs","LinearGradient","Stop","Animated","useSharedValue","withTiming","useAnimatedProps","withDelay","runOnJS","AnimatedCircle","createAnimatedComponent","CircularProgressWithChild","value","initialValue","circleBackgroundColor","radius","duration","delay","maxValue","strokeLinecap","onAnimationComplete","activeStrokeColor","activeStrokeSecondaryColor","activeStrokeWidth","inActiveStrokeColor","inActiveStrokeWidth","inActiveStrokeOpacity","children","clockwise","animatedValue","viewBox","Math","max","circleCircumference","PI","animatedCircleProps","biggestValue","maxPercentage","strokeDashoffset","isFinished","StyleSheet","absoluteFillObject","styles","valueContainer","create","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport Svg, { G, Circle, Defs, LinearGradient, Stop } from \"react-native-svg\";\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedProps,\n  withDelay,\n  runOnJS,\n} from \"react-native-reanimated\";\nimport { CircularProgressWithChildProps } from \"./types\";\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nconst CircularProgressWithChild: React.FC<CircularProgressWithChildProps> = ({\n  value,\n  initialValue = 0,\n  circleBackgroundColor = \"transparent\",\n  radius = 60,\n  duration = 500,\n  delay = 0,\n  maxValue = 100,\n  strokeLinecap = \"round\",\n  onAnimationComplete = () => {},\n  activeStrokeColor = \"#2ecc71\",\n  activeStrokeSecondaryColor = \"\",\n  activeStrokeWidth = 10,\n  inActiveStrokeColor = \"rgba(0,0,0,0.3)\",\n  inActiveStrokeWidth = 10,\n  inActiveStrokeOpacity = 1,\n  children,\n  clockwise = true,\n}: CircularProgressWithChildProps) => {\n  const animatedValue = useSharedValue(initialValue);\n  const viewBox = radius + Math.max(activeStrokeWidth, inActiveStrokeWidth);\n  const circleCircumference = 2 * Math.PI * radius;\n\n  const animatedCircleProps = useAnimatedProps(() => {\n    let biggestValue = Math.max(initialValue, maxValue);\n    biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n    const maxPercentage: number = clockwise\n      ? (100 * animatedValue.value) / biggestValue\n      : (100 * -animatedValue.value) / biggestValue;\n    return {\n      strokeDashoffset:\n        circleCircumference - (circleCircumference * maxPercentage) / 100,\n    };\n  });\n\n  useEffect(() => {\n    animatedValue.value = withDelay(\n      delay,\n      withTiming(value, { duration }, (isFinished) => {\n        if (isFinished) {\n          runOnJS(onAnimationComplete)?.();\n        }\n      })\n    );\n  }, [value]);\n\n  return (\n    <View>\n      <Svg\n        width={radius * 2}\n        height={radius * 2}\n        viewBox={`0 0 ${viewBox * 2} ${viewBox * 2}`}\n      >\n        {activeStrokeSecondaryColor ? (\n          <Defs>\n            <LinearGradient id={\"grad\"} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <Stop offset=\"0%\" stopColor={activeStrokeSecondaryColor} />\n              <Stop offset=\"100%\" stopColor={activeStrokeColor} />\n            </LinearGradient>\n          </Defs>\n        ) : null}\n        <G rotation={\"-90\"} origin={`${viewBox}, ${viewBox}`}>\n          <Circle\n            cx=\"50%\"\n            cy=\"50%\"\n            stroke={inActiveStrokeColor}\n            strokeWidth={inActiveStrokeWidth}\n            r={radius}\n            fill={circleBackgroundColor}\n            strokeOpacity={inActiveStrokeOpacity}\n          />\n          <AnimatedCircle\n            cx=\"50%\"\n            cy=\"50%\"\n            stroke={\n              activeStrokeSecondaryColor ? \"url(#grad)\" : activeStrokeColor\n            }\n            strokeWidth={activeStrokeWidth}\n            r={radius}\n            fill={\"transparent\"}\n            strokeDasharray={circleCircumference}\n            animatedProps={animatedCircleProps}\n            strokeLinecap={strokeLinecap}\n          />\n        </G>\n      </Svg>\n      <View style={[StyleSheet.absoluteFillObject, styles.valueContainer]}>\n        {children}\n      </View>\n    </View>\n  );\n};\n\nexport const styles = StyleSheet.create({\n  valueContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default CircularProgressWithChild;\n"]},"metadata":{},"sourceType":"module"}