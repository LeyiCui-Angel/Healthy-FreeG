{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Text, View } from \"../components/Themed\";\nimport { Data } from \"../data/FGList\";\nimport { StatusBar } from 'expo-status-bar';\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Item = function Item(_ref) {\n  var title = _ref.title;\n  return _jsx(View, {\n    style: styles.item,\n    children: _jsx(Text, {\n      style: styles.title,\n      children: title\n    })\n  });\n};\n\nvar AppleStyleSwipeableRow = function (_Component) {\n  _inherits(AppleStyleSwipeableRow, _Component);\n\n  var _super = _createSuper(AppleStyleSwipeableRow);\n\n  function AppleStyleSwipeableRow() {\n    var _this;\n\n    _classCallCheck(this, AppleStyleSwipeableRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderLeftActions = function (progress, dragX) {\n      var trans = dragX.interpolate({\n        inputRange: [0, 50, 100, 101],\n        outputRange: [-20, 0, 0, 1]\n      });\n      return _jsx(RectButton, {\n        style: styles.leftAction,\n        onPress: _this.close,\n        children: _jsx(Animated.Text, {\n          style: [styles.actionText, {\n            transform: [{\n              translateX: trans\n            }]\n          }],\n          children: \"Archive\"\n        })\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AppleStyleSwipeableRow, [{\n    key: \"render\",\n    value: function render() {\n      return _jsxs(SafeAreaView, {\n        style: styles.container,\n        children: [_jsx(SectionList, {\n          sections: Data,\n          keyExtractor: function keyExtractor(item, index) {\n            return item + index;\n          },\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(Item, {\n              title: item\n            });\n          },\n          renderSectionHeader: function renderSectionHeader(_ref3) {\n            var title = _ref3.section.title;\n            return _jsx(Text, {\n              style: styles.header,\n              children: title\n            });\n          }\n        }), _jsx(Swipeable, {\n          renderLeftActions: this.renderLeftActions\n        }), _jsx(Button, {\n          title: \"Add food\",\n          color: \"#f194ff\",\n          onPress: function onPress() {\n            return Alert.alert('Recipe scanned! Food added.');\n          }\n        })]\n      });\n    }\n  }]);\n\n  return AppleStyleSwipeableRow;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16\n  },\n  item: {\n    backgroundColor: \"#b5c4b1\",\n    padding: 20,\n    marginVertical: 3\n  },\n  header: {\n    fontSize: 25,\n    backgroundColor: \"#bfbfbf\"\n  },\n  title: {\n    fontSize: 12\n  }\n});\nexport default TabOneScreen;","map":{"version":3,"sources":["/Users/angelcui/HealthyFreeG/screens/TabOneScreen.tsx"],"names":["React","Component","Text","View","Data","StatusBar","RectButton","Swipeable","Item","title","styles","item","AppleStyleSwipeableRow","renderLeftActions","progress","dragX","trans","interpolate","inputRange","outputRange","leftAction","close","actionText","transform","translateX","container","index","section","header","Alert","alert","StyleSheet","create","flex","justifyContent","paddingTop","currentHeight","marginHorizontal","backgroundColor","padding","marginVertical","fontSize","TabOneScreen"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Animated, StyleSheet, SafeAreaView, SectionList, Button, Alert, } from \"react-native\";\n\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nimport { Data } from '../data/FGList'\nimport { StatusBar } from 'expo-status-bar';\n\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\nconst Item = ({ title }) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\n// swipe\nclass AppleStyleSwipeableRow extends Component {\n  renderLeftActions = (progress, dragX) => {\n    const trans = dragX.interpolate({\n      inputRange: [0, 50, 100, 101],\n      outputRange: [-20, 0, 0, 1],\n    });\n    return (\n      <RectButton style={styles.leftAction} onPress={this.close}>\n        <Animated.Text\n          style={[\n            styles.actionText,\n            {\n              transform: [{ translateX: trans }],\n            },\n          ]}>\n          Archive\n        </Animated.Text>\n      </RectButton>\n    );\n  };\n  render(){\n  //TabOneScreen = ({ navigation }: RootTabScreenProps<'TabOne'>) => (\n    return(\n      <SafeAreaView style={styles.container}>\n        <SectionList\n          sections={Data}\n          keyExtractor={(item, index) => item + index}\n          renderItem={({ item }) => <Item title={item} />}\n          renderSectionHeader={({ section: { title } }) => (\n            <Text style={styles.header}>{title}</Text>\n          )}\n        />\n        <Swipeable renderLeftActions={this.renderLeftActions}></Swipeable>\n        <Button\n            title=\"Add food\"\n            color=\"#f194ff\"\n            onPress={() => Alert.alert('Recipe scanned! Food added.')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\n// Style\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16\n  },\n  item: {\n    backgroundColor: \"#b5c4b1\",\n    padding: 20,\n    marginVertical: 3\n  },\n  header: {\n    fontSize: 25,\n    backgroundColor: \"#bfbfbf\"\n  },\n  title: {\n    fontSize: 12\n  }\n});\n\nexport default TabOneScreen;"]},"metadata":{},"sourceType":"module"}