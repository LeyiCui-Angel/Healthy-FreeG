{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n{}\nimport * as React from 'react';\nimport { useState } from 'react';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport Constants from 'expo-constants';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DATA = [{\n  title: \"Main dishes\",\n  data: [\"Pizza\", \"Burger\", \"Risotto\"]\n}, {\n  title: \"Sides\",\n  data: [\"French Fries\", \"Onion Rings\", \"Fried Shrimps\"]\n}, {\n  title: \"Drinks\",\n  data: [\"Water\", \"Coke\", \"Beer\"]\n}, {\n  title: \"Desserts\",\n  data: [\"Cheese Cake\", \"Ice Cream\"]\n}];\n\nvar Item = function Item(_ref) {\n  var title = _ref.title;\n  return _jsx(View, {\n    style: styles.item,\n    children: _jsx(Text, {\n      style: styles.title,\n      children: title\n    })\n  });\n};\n\nexport default function App() {\n  var _useState = useState(DATA),\n      _useState2 = _slicedToArray(_useState, 2),\n      listData = _useState2[0],\n      setListData = _useState2[1];\n\n  var row = [];\n  var prevOpenedRow;\n\n  var renderItem = function renderItem(_ref2, onClick) {\n    var item = _ref2.item,\n        index = _ref2.index;\n\n    var closeRow = function closeRow(index) {\n      console.log('closerow');\n\n      if (prevOpenedRow && prevOpenedRow !== row[index]) {\n        prevOpenedRow.close();\n      }\n\n      prevOpenedRow = row[index];\n    };\n\n    var _renderRightActions = function renderRightActions(progress, dragX, onClick) {\n      return _jsx(View, {\n        style: {\n          margin: 0,\n          alignContent: 'center',\n          justifyContent: 'center',\n          width: 70\n        },\n        children: _jsx(Button, {\n          color: \"red\",\n          onPress: onClick,\n          title: \"DELETE\"\n        })\n      });\n    };\n\n    return _jsxs(_Fragment, {\n      children: [_jsx(Swipeable, {\n        renderRightActions: function renderRightActions(progress, dragX) {\n          return _renderRightActions(progress, dragX, onClick);\n        },\n        onSwipeableOpen: function onSwipeableOpen() {\n          return closeRow(index);\n        },\n        ref: function ref(_ref3) {\n          return row[index] = _ref3;\n        },\n        rightOpenValue: -100,\n        children: _jsx(View, {\n          style: {\n            margin: 4,\n            borderColor: 'grey',\n            borderWidth: 1,\n            padding: 9,\n            backgroundColor: 'white'\n          },\n          children: _jsx(Text, {\n            children: item.title\n          })\n        })\n      }), _jsx(Button, {\n        title: \"Add food\",\n        color: \"#f194ff\",\n        onPress: function onPress() {\n          return Alert.alert('Recipe scanned! Food added.');\n        }\n      })]\n    });\n  };\n\n  var deleteItem = function deleteItem(_ref4) {\n    var item = _ref4.item,\n        index = _ref4.index;\n    console.log(item, index);\n    var a = listData;\n    a.splice(index, 1);\n    console.log(a);\n    setListData(_toConsumableArray(a));\n  };\n\n  return _jsx(SafeAreaView, {\n    style: styles.container,\n    children: _jsx(SectionList, {\n      sections: DATA,\n      keyExtractor: function keyExtractor(item, index) {\n        return item + index;\n      },\n      renderItem: function renderItem(_ref5) {\n        var item = _ref5.item;\n        return _jsx(Item, {\n          title: item\n        });\n      },\n      renderSectionHeader: function renderSectionHeader(_ref6) {\n        var title = _ref6.section.title;\n        return _jsx(Text, {\n          style: styles.header,\n          children: title\n        });\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n    padding: 8\n  },\n  paragraph: {\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/angelcui/HealthyFreeG/screens/TabOneScreen.tsx"],"names":["React","useState","Swipeable","Constants","DATA","title","data","Item","styles","item","App","listData","setListData","row","prevOpenedRow","renderItem","onClick","index","closeRow","console","log","close","renderRightActions","progress","dragX","margin","alignContent","justifyContent","width","ref","borderColor","borderWidth","padding","backgroundColor","Alert","alert","deleteItem","a","splice","container","section","header","StyleSheet","create","flex","paddingTop","statusBarHeight","paragraph","fontSize","fontWeight","textAlign"],"mappings":"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","sourcesContent":["{/*import React, { Component } from 'react';\nimport { Animated, StyleSheet, SafeAreaView, SectionList, Button, Alert, } from \"react-native\";\n\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nimport { Data } from '../data/FGList'\nimport { StatusBar } from 'expo-status-bar';\n\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\nconst Item = ({ title }) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\nconst TabOneScreen = ({ navigation }: RootTabScreenProps<'TabOne'>) => (\n  <SafeAreaView style={styles.container}>\n\n        renderRightActions={(progress, dragX) =>\n          renderRightActions(progress, dragX, onClick)\n        }\n        onSwipeableOpen={() => closeRow(index)}\n        ref={(ref) => (row[index] = ref)}\n        rightOpenValue={-100}>\n    <SectionList\n      sections={Data}\n      keyExtractor={(item, index) => item + index}\n      renderItem={({ item }) => <Item title={item} />}\n      renderSectionHeader={({ section: { title } }) => (\n        <Text style={styles.header}>{title}</Text>\n      )}\n    />\n    </Swipeable>\n    <Button\n        title=\"Add food\"\n        color=\"#f194ff\"\n        onPress={() => Alert.alert('Recipe scanned! Food added.')}\n    />\n  </SafeAreaView>\n);\n\n// Style\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16\n  },\n  item: {\n    backgroundColor: \"#b5c4b1\",\n    padding: 20,\n    marginVertical: 3\n  },\n  header: {\n    fontSize: 25,\n    backgroundColor: \"#bfbfbf\"\n  },\n  title: {\n    fontSize: 12\n  }\n});\n\nexport default TabOneScreen;*/}\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\nimport Constants from 'expo-constants';\n\nimport { StyleSheet, Text, View, SafeAreaView, SectionList, StatusBar } from \"react-native\";\n\nconst DATA = [\n  {\n    title: \"Main dishes\",\n    data: [\"Pizza\", \"Burger\", \"Risotto\"]\n  },\n  {\n    title: \"Sides\",\n    data: [\"French Fries\", \"Onion Rings\", \"Fried Shrimps\"]\n  },\n  {\n    title: \"Drinks\",\n    data: [\"Water\", \"Coke\", \"Beer\"]\n  },\n  {\n    title: \"Desserts\",\n    data: [\"Cheese Cake\", \"Ice Cream\"]\n  }\n];\n\nconst Item = ({ title }) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\nexport default function App() {\n  const [listData, setListData] = useState(DATA);\n  let row: Array<any> = [];\n  let prevOpenedRow;\n\n  /**\n   *\n   */\n  const renderItem = ({ item, index }, onClick) => {\n    //\n    const closeRow = (index) => {\n      console.log('closerow');\n      if (prevOpenedRow && prevOpenedRow !== row[index]) {\n        prevOpenedRow.close();\n      }\n      prevOpenedRow = row[index];\n    };\n\n    const renderRightActions = (progress, dragX, onClick) => {\n      return (\n        <View\n          style={{\n            margin: 0,\n            alignContent: 'center',\n            justifyContent: 'center',\n            width: 70,\n          }}>\n          <Button color=\"red\" onPress={onClick} title=\"DELETE\"></Button>\n        </View>\n      );\n    };\n\n    return (\n      <>\n        <Swipeable\n          renderRightActions={(progress, dragX) => renderRightActions(progress, dragX, onClick)}\n          onSwipeableOpen={() => closeRow(index)}\n          ref={(ref) => (row[index] = ref)}\n          rightOpenValue={-100}>\n          <View\n            style={{\n              margin: 4,\n              borderColor: 'grey',\n              borderWidth: 1,\n              padding: 9,\n              backgroundColor: 'white',\n            }}>\n            <Text>{item.title}</Text>\n          </View>\n        </Swipeable>\n        <Button\n            title=\"Add food\"\n            color=\"#f194ff\"\n            onPress={() => Alert.alert('Recipe scanned! Food added.')} \n        />\n      </>\n    );\n  };\n\n  const deleteItem = ({ item, index }) => {\n    console.log(item, index);\n    let a = listData;\n    a.splice(index, 1);\n    console.log(a);\n    setListData([...a]);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n          <SectionList\n            sections={DATA}\n            keyExtractor={(item, index) => item + index}\n            renderItem={({ item }) => <Item title={item} />}\n            renderSectionHeader={({ section: { title } }) => (\n              <Text style={styles.header}>{title}</Text>\n            )}\n          />\n        </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n  paragraph: {\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}