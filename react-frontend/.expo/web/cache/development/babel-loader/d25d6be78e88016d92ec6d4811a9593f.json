{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Svg, { G, Circle, Defs, LinearGradient, Stop } from \"react-native-svg\";\nimport Animated, { useSharedValue, withTiming, useAnimatedProps, withDelay, runOnJS, useDerivedValue } from \"react-native-reanimated\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar AnimatedInput = Animated.createAnimatedComponent(TextInput);\n\nvar CircularProgress = function CircularProgress(_ref) {\n  var value = _ref.value,\n      _ref$initialValue = _ref.initialValue,\n      initialValue = _ref$initialValue === void 0 ? 0 : _ref$initialValue,\n      _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \"\" : _ref$title,\n      _ref$titleStyle = _ref.titleStyle,\n      titleStyle = _ref$titleStyle === void 0 ? {} : _ref$titleStyle,\n      titleColor = _ref.titleColor,\n      titleFontSize = _ref.titleFontSize,\n      _ref$circleBackground = _ref.circleBackgroundColor,\n      circleBackgroundColor = _ref$circleBackground === void 0 ? \"transparent\" : _ref$circleBackground,\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 60 : _ref$radius,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 500 : _ref$duration,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 0 : _ref$delay,\n      textColor = _ref.textColor,\n      _ref$textStyle = _ref.textStyle,\n      textStyle = _ref$textStyle === void 0 ? {} : _ref$textStyle,\n      fontSize = _ref.fontSize,\n      _ref$maxValue = _ref.maxValue,\n      maxValue = _ref$maxValue === void 0 ? 100 : _ref$maxValue,\n      _ref$strokeLinecap = _ref.strokeLinecap,\n      strokeLinecap = _ref$strokeLinecap === void 0 ? \"round\" : _ref$strokeLinecap,\n      _ref$onAnimationCompl = _ref.onAnimationComplete,\n      onAnimationComplete = _ref$onAnimationCompl === void 0 ? function () {} : _ref$onAnimationCompl,\n      _ref$valuePrefix = _ref.valuePrefix,\n      valuePrefix = _ref$valuePrefix === void 0 ? \"\" : _ref$valuePrefix,\n      _ref$valueSuffix = _ref.valueSuffix,\n      valueSuffix = _ref$valueSuffix === void 0 ? \"\" : _ref$valueSuffix,\n      _ref$activeStrokeColo = _ref.activeStrokeColor,\n      activeStrokeColor = _ref$activeStrokeColo === void 0 ? \"#2ecc71\" : _ref$activeStrokeColo,\n      _ref$activeStrokeSeco = _ref.activeStrokeSecondaryColor,\n      activeStrokeSecondaryColor = _ref$activeStrokeSeco === void 0 ? \"\" : _ref$activeStrokeSeco,\n      _ref$activeStrokeWidt = _ref.activeStrokeWidth,\n      activeStrokeWidth = _ref$activeStrokeWidt === void 0 ? 10 : _ref$activeStrokeWidt,\n      _ref$inActiveStrokeCo = _ref.inActiveStrokeColor,\n      inActiveStrokeColor = _ref$inActiveStrokeCo === void 0 ? \"rgba(0,0,0,0.3)\" : _ref$inActiveStrokeCo,\n      _ref$inActiveStrokeWi = _ref.inActiveStrokeWidth,\n      inActiveStrokeWidth = _ref$inActiveStrokeWi === void 0 ? 10 : _ref$inActiveStrokeWi,\n      _ref$inActiveStrokeOp = _ref.inActiveStrokeOpacity,\n      inActiveStrokeOpacity = _ref$inActiveStrokeOp === void 0 ? 1 : _ref$inActiveStrokeOp,\n      _ref$showProgressValu = _ref.showProgressValue,\n      showProgressValue = _ref$showProgressValu === void 0 ? true : _ref$showProgressValu,\n      _ref$clockwise = _ref.clockwise,\n      clockwise = _ref$clockwise === void 0 ? true : _ref$clockwise,\n      _ref$subtitle = _ref.subtitle,\n      subtitle = _ref$subtitle === void 0 ? \"\" : _ref$subtitle,\n      _ref$subtitleStyle = _ref.subtitleStyle,\n      subtitleStyle = _ref$subtitleStyle === void 0 ? {} : _ref$subtitleStyle,\n      subtitleColor = _ref.subtitleColor,\n      subtitleFontSize = _ref.subtitleFontSize;\n  var styleProps = {\n    radius: radius,\n    textColor: textColor,\n    fontSize: fontSize,\n    textStyle: textStyle,\n    activeStrokeColor: activeStrokeColor,\n    titleStyle: titleStyle,\n    titleColor: titleColor,\n    titleFontSize: titleFontSize,\n    showProgressValue: showProgressValue,\n    subtitleColor: subtitleColor,\n    subtitleFontSize: subtitleFontSize\n  };\n  var animatedValue = useSharedValue(initialValue);\n  var viewBox = radius + Math.max(activeStrokeWidth, inActiveStrokeWidth);\n  var circleCircumference = 2 * Math.PI * radius;\n  var animatedCircleProps = useAnimatedProps(function () {\n    var biggestValue = Math.max(initialValue, maxValue);\n    biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n    var maxPercentage = clockwise ? 100 * animatedValue.value / biggestValue : 100 * -animatedValue.value / biggestValue;\n    return {\n      strokeDashoffset: circleCircumference - circleCircumference * maxPercentage / 100\n    };\n  });\n  var progressValue = useDerivedValue(function () {\n    return \"\" + valuePrefix + Math.round(animatedValue.value) + valueSuffix;\n  });\n  var animatedTextProps = useAnimatedProps(function () {\n    return {\n      text: progressValue.value\n    };\n  });\n  useEffect(function () {\n    animatedValue.value = withDelay(delay, withTiming(value, {\n      duration: duration\n    }, function (isFinished) {\n      if (isFinished) {\n        var _runOnJS;\n\n        (_runOnJS = runOnJS(onAnimationComplete)) == null ? void 0 : _runOnJS();\n      }\n    }));\n  }, [value]);\n  return _jsxs(View, {\n    children: [_jsxs(Svg, {\n      width: radius * 2,\n      height: radius * 2,\n      viewBox: \"0 0 \" + viewBox * 2 + \" \" + viewBox * 2,\n      children: [activeStrokeSecondaryColor ? _jsx(Defs, {\n        children: _jsxs(LinearGradient, {\n          id: \"grad\",\n          x1: \"0%\",\n          y1: \"0%\",\n          x2: \"0%\",\n          y2: \"100%\",\n          children: [_jsx(Stop, {\n            offset: \"0%\",\n            stopColor: activeStrokeSecondaryColor\n          }), _jsx(Stop, {\n            offset: \"100%\",\n            stopColor: activeStrokeColor\n          })]\n        })\n      }) : null, _jsxs(G, {\n        rotation: \"-90\",\n        origin: viewBox + \", \" + viewBox,\n        children: [_jsx(Circle, {\n          cx: \"50%\",\n          cy: \"50%\",\n          stroke: inActiveStrokeColor,\n          strokeWidth: inActiveStrokeWidth,\n          r: radius,\n          fill: circleBackgroundColor,\n          strokeOpacity: inActiveStrokeOpacity\n        }), _jsx(AnimatedCircle, {\n          cx: \"50%\",\n          cy: \"50%\",\n          stroke: activeStrokeSecondaryColor ? \"url(#grad)\" : activeStrokeColor,\n          strokeWidth: activeStrokeWidth,\n          r: radius,\n          fill: \"transparent\",\n          strokeDasharray: circleCircumference,\n          animatedProps: animatedCircleProps,\n          strokeLinecap: strokeLinecap\n        })]\n      })]\n    }), _jsxs(View, {\n      style: [StyleSheet.absoluteFillObject, dynamicStyles(styleProps).valueContainer],\n      children: [showProgressValue && _jsx(AnimatedInput, {\n        underlineColorAndroid: \"transparent\",\n        editable: false,\n        defaultValue: \"\" + valuePrefix + initialValue + valueSuffix,\n        style: [dynamicStyles(styleProps).input, textStyle, dynamicStyles(styleProps).fromProps],\n        animatedProps: animatedTextProps\n      }), title && title !== \"\" ? _jsx(Text, {\n        style: [dynamicStyles(styleProps).title, titleStyle],\n        numberOfLines: 1,\n        children: title\n      }) : null, subtitle && subtitle !== \"\" ? _jsx(Text, {\n        style: [dynamicStyles(styleProps).title, dynamicStyles(styleProps).subtitle, subtitleStyle],\n        numberOfLines: 1,\n        children: subtitle\n      }) : null]\n    })]\n  });\n};\n\nexport var dynamicStyles = function dynamicStyles(props) {\n  var _props$textStyle, _props$textStyle2, _props$titleStyle, _props$titleStyle2, _props$subtitleStyle, _props$subtitleStyle2;\n\n  return StyleSheet.create({\n    fromProps: {\n      fontSize: props.fontSize || ((_props$textStyle = props.textStyle) == null ? void 0 : _props$textStyle.fontSize) || props.radius / 2,\n      color: props.textColor || ((_props$textStyle2 = props.textStyle) == null ? void 0 : _props$textStyle2.color) || props.activeStrokeColor\n    },\n    input: {\n      fontWeight: \"bold\",\n      textAlign: \"center\"\n    },\n    valueContainer: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    title: {\n      textAlign: \"center\",\n      width: \"70%\",\n      marginTop: props.showProgressValue ? props.radius * 0.05 : 0,\n      color: props.titleColor || ((_props$titleStyle = props.titleStyle) == null ? void 0 : _props$titleStyle.color) || props.activeStrokeColor,\n      fontSize: props.titleFontSize || ((_props$titleStyle2 = props.titleStyle) == null ? void 0 : _props$titleStyle2.fontSize) || props.fontSize || props.radius / 4\n    },\n    subtitle: {\n      color: props.subtitleColor || ((_props$subtitleStyle = props.subtitleStyle) == null ? void 0 : _props$subtitleStyle.color) || props.activeStrokeColor,\n      fontSize: props.subtitleFontSize || ((_props$subtitleStyle2 = props.subtitleStyle) == null ? void 0 : _props$subtitleStyle2.fontSize) || props.fontSize || props.radius / 5\n    }\n  });\n};\nexport default CircularProgress;","map":{"version":3,"sources":["/Users/angelcui/HealthyFreeG/node_modules/react-native-circular-progress-indicator/src/circularProgress/index.tsx"],"names":["React","useEffect","Svg","G","Circle","Defs","LinearGradient","Stop","Animated","useSharedValue","withTiming","useAnimatedProps","withDelay","runOnJS","useDerivedValue","AnimatedCircle","createAnimatedComponent","AnimatedInput","TextInput","CircularProgress","value","initialValue","title","titleStyle","titleColor","titleFontSize","circleBackgroundColor","radius","duration","delay","textColor","textStyle","fontSize","maxValue","strokeLinecap","onAnimationComplete","valuePrefix","valueSuffix","activeStrokeColor","activeStrokeSecondaryColor","activeStrokeWidth","inActiveStrokeColor","inActiveStrokeWidth","inActiveStrokeOpacity","showProgressValue","clockwise","subtitle","subtitleStyle","subtitleColor","subtitleFontSize","styleProps","animatedValue","viewBox","Math","max","circleCircumference","PI","animatedCircleProps","biggestValue","maxPercentage","strokeDashoffset","progressValue","round","animatedTextProps","text","isFinished","StyleSheet","absoluteFillObject","dynamicStyles","valueContainer","input","fromProps","props","create","color","fontWeight","textAlign","flex","alignItems","justifyContent","width","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { StyleSheet, View, TextInput, Text } from \"react-native\";\nimport Svg, { G, Circle, Defs, LinearGradient, Stop } from \"react-native-svg\";\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedProps,\n  withDelay,\n  runOnJS,\n  useDerivedValue,\n} from \"react-native-reanimated\";\nimport { CircularProgressProps } from \"./types\";\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\nconst AnimatedInput = Animated.createAnimatedComponent(TextInput);\n\nconst CircularProgress: React.FC<CircularProgressProps> = ({\n  value,\n  initialValue = 0,\n  title = \"\",\n  titleStyle = {},\n  titleColor,\n  titleFontSize,\n  circleBackgroundColor = \"transparent\",\n  radius = 60,\n  duration = 500,\n  delay = 0,\n  textColor,\n  textStyle = {},\n  fontSize,\n  maxValue = 100,\n  strokeLinecap = \"round\",\n  onAnimationComplete = () => {},\n  valuePrefix = \"\",\n  valueSuffix = \"\",\n  activeStrokeColor = \"#2ecc71\",\n  activeStrokeSecondaryColor = \"\",\n  activeStrokeWidth = 10,\n  inActiveStrokeColor = \"rgba(0,0,0,0.3)\",\n  inActiveStrokeWidth = 10,\n  inActiveStrokeOpacity = 1,\n  showProgressValue = true,\n  clockwise = true,\n  subtitle = \"\",\n  subtitleStyle = {},\n  subtitleColor,\n  subtitleFontSize,\n}) => {\n  const styleProps = {\n    radius,\n    textColor,\n    fontSize,\n    textStyle,\n    activeStrokeColor,\n    titleStyle,\n    titleColor,\n    titleFontSize,\n    showProgressValue,\n    subtitleColor,\n    subtitleFontSize,\n  };\n\n  const animatedValue = useSharedValue(initialValue);\n  const viewBox = radius + Math.max(activeStrokeWidth, inActiveStrokeWidth);\n  const circleCircumference = 2 * Math.PI * radius;\n\n  const animatedCircleProps = useAnimatedProps(() => {\n    let biggestValue = Math.max(initialValue, maxValue);\n    biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n    const maxPercentage: number = clockwise\n      ? (100 * animatedValue.value) / biggestValue\n      : (100 * -animatedValue.value) / biggestValue;\n    return {\n      strokeDashoffset:\n        circleCircumference - (circleCircumference * maxPercentage) / 100,\n    };\n  });\n\n  const progressValue = useDerivedValue(() => {\n    return `${valuePrefix}${Math.round(animatedValue.value)}${valueSuffix}`;\n  });\n\n  const animatedTextProps = useAnimatedProps(() => {\n    return {\n      text: progressValue.value,\n    } as any;\n  });\n\n  useEffect(() => {\n    animatedValue.value = withDelay(\n      delay,\n      withTiming(value, { duration }, (isFinished) => {\n        if (isFinished) {\n          runOnJS(onAnimationComplete)?.();\n        }\n      })\n    );\n  }, [value]);\n\n  return (\n    <View>\n      <Svg\n        width={radius * 2}\n        height={radius * 2}\n        viewBox={`0 0 ${viewBox * 2} ${viewBox * 2}`}\n      >\n        {activeStrokeSecondaryColor ? (\n          <Defs>\n            <LinearGradient id={\"grad\"} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <Stop offset=\"0%\" stopColor={activeStrokeSecondaryColor} />\n              <Stop offset=\"100%\" stopColor={activeStrokeColor} />\n            </LinearGradient>\n          </Defs>\n        ) : null}\n        <G rotation={\"-90\"} origin={`${viewBox}, ${viewBox}`}>\n          <Circle\n            cx=\"50%\"\n            cy=\"50%\"\n            stroke={inActiveStrokeColor}\n            strokeWidth={inActiveStrokeWidth}\n            r={radius}\n            fill={circleBackgroundColor}\n            strokeOpacity={inActiveStrokeOpacity}\n          />\n          <AnimatedCircle\n            cx=\"50%\"\n            cy=\"50%\"\n            stroke={\n              activeStrokeSecondaryColor ? \"url(#grad)\" : activeStrokeColor\n            }\n            strokeWidth={activeStrokeWidth}\n            r={radius}\n            fill={\"transparent\"}\n            strokeDasharray={circleCircumference}\n            animatedProps={animatedCircleProps}\n            strokeLinecap={strokeLinecap}\n          />\n        </G>\n      </Svg>\n      <View\n        style={[\n          StyleSheet.absoluteFillObject,\n          dynamicStyles(styleProps).valueContainer,\n        ]}\n      >\n        {showProgressValue && (\n          <AnimatedInput\n            underlineColorAndroid={\"transparent\"}\n            editable={false}\n            defaultValue={`${valuePrefix}${initialValue}${valueSuffix}`}\n            style={[\n              dynamicStyles(styleProps).input,\n              textStyle,\n              dynamicStyles(styleProps).fromProps,\n            ]}\n            animatedProps={animatedTextProps}\n          />\n        )}\n        {title && title !== \"\" ? (\n          <Text\n            style={[dynamicStyles(styleProps).title, titleStyle]}\n            numberOfLines={1}\n          >\n            {title}\n          </Text>\n        ) : null}\n        {subtitle && subtitle !== \"\" ? (\n          <Text\n            style={[\n              dynamicStyles(styleProps).title,\n              dynamicStyles(styleProps).subtitle,\n              subtitleStyle,\n            ]}\n            numberOfLines={1}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </View>\n  );\n};\n\nexport const dynamicStyles = (props) => {\n  return StyleSheet.create({\n    fromProps: {\n      fontSize: props.fontSize || props.textStyle?.fontSize || props.radius / 2,\n      color:\n        props.textColor || props.textStyle?.color || props.activeStrokeColor,\n    },\n    input: {\n      fontWeight: \"bold\",\n      textAlign: \"center\",\n    },\n    valueContainer: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    title: {\n      textAlign: \"center\",\n      width: \"70%\",\n      marginTop: props.showProgressValue ? props.radius * 0.05 : 0,\n      color:\n        props.titleColor || props.titleStyle?.color || props.activeStrokeColor,\n      fontSize:\n        props.titleFontSize ||\n        props.titleStyle?.fontSize ||\n        props.fontSize ||\n        props.radius / 4,\n    },\n    subtitle: {\n      color:\n        props.subtitleColor ||\n        props.subtitleStyle?.color ||\n        props.activeStrokeColor,\n      fontSize:\n        props.subtitleFontSize ||\n        props.subtitleStyle?.fontSize ||\n        props.fontSize ||\n        props.radius / 5,\n    },\n  });\n};\n\nexport default CircularProgress;\n"]},"metadata":{},"sourceType":"module"}